// @generated by protoc-gen-es v1.7.1 with parameter "target=ts"
// @generated from file price/v1/price.proto (package price.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message price.v1.StreamPricesRequest
 */
export class StreamPricesRequest extends Message<StreamPricesRequest> {
  /**
   * opaque UUID per tab
   *
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * optional bootstrap list
   *
   * @generated from field: repeated string initial_symbols = 2;
   */
  initialSymbols: string[] = [];

  constructor(data?: PartialMessage<StreamPricesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "price.v1.StreamPricesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "initial_symbols", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamPricesRequest {
    return new StreamPricesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamPricesRequest {
    return new StreamPricesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamPricesRequest {
    return new StreamPricesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamPricesRequest | PlainMessage<StreamPricesRequest> | undefined, b: StreamPricesRequest | PlainMessage<StreamPricesRequest> | undefined): boolean {
    return proto3.util.equals(StreamPricesRequest, a, b);
  }
}

/**
 * @generated from message price.v1.AddTickerRequest
 */
export class AddTickerRequest extends Message<AddTickerRequest> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * e.g., BTCUSD
   *
   * @generated from field: string symbol = 2;
   */
  symbol = "";

  constructor(data?: PartialMessage<AddTickerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "price.v1.AddTickerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddTickerRequest {
    return new AddTickerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddTickerRequest {
    return new AddTickerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddTickerRequest {
    return new AddTickerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddTickerRequest | PlainMessage<AddTickerRequest> | undefined, b: AddTickerRequest | PlainMessage<AddTickerRequest> | undefined): boolean {
    return proto3.util.equals(AddTickerRequest, a, b);
  }
}

/**
 * @generated from message price.v1.RemoveTickerRequest
 */
export class RemoveTickerRequest extends Message<RemoveTickerRequest> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: string symbol = 2;
   */
  symbol = "";

  constructor(data?: PartialMessage<RemoveTickerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "price.v1.RemoveTickerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveTickerRequest {
    return new RemoveTickerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveTickerRequest {
    return new RemoveTickerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveTickerRequest {
    return new RemoveTickerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveTickerRequest | PlainMessage<RemoveTickerRequest> | undefined, b: RemoveTickerRequest | PlainMessage<RemoveTickerRequest> | undefined): boolean {
    return proto3.util.equals(RemoveTickerRequest, a, b);
  }
}

/**
 * @generated from message price.v1.AddTickerResponse
 */
export class AddTickerResponse extends Message<AddTickerResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error_message = 2;
   */
  errorMessage = "";

  /**
   * optional snapshot
   *
   * @generated from field: price.v1.PricePoint initial_price = 3;
   */
  initialPrice?: PricePoint;

  constructor(data?: PartialMessage<AddTickerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "price.v1.AddTickerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "initial_price", kind: "message", T: PricePoint },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddTickerResponse {
    return new AddTickerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddTickerResponse {
    return new AddTickerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddTickerResponse {
    return new AddTickerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddTickerResponse | PlainMessage<AddTickerResponse> | undefined, b: AddTickerResponse | PlainMessage<AddTickerResponse> | undefined): boolean {
    return proto3.util.equals(AddTickerResponse, a, b);
  }
}

/**
 * @generated from message price.v1.RemoveTickerResponse
 */
export class RemoveTickerResponse extends Message<RemoveTickerResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error_message = 2;
   */
  errorMessage = "";

  constructor(data?: PartialMessage<RemoveTickerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "price.v1.RemoveTickerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveTickerResponse {
    return new RemoveTickerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveTickerResponse {
    return new RemoveTickerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveTickerResponse {
    return new RemoveTickerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveTickerResponse | PlainMessage<RemoveTickerResponse> | undefined, b: RemoveTickerResponse | PlainMessage<RemoveTickerResponse> | undefined): boolean {
    return proto3.util.equals(RemoveTickerResponse, a, b);
  }
}

/**
 * @generated from message price.v1.PricePoint
 */
export class PricePoint extends Message<PricePoint> {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol = "";

  /**
   * keep precision
   *
   * @generated from field: string price_string = 2;
   */
  priceString = "";

  /**
   * @generated from field: google.protobuf.Timestamp ts = 3;
   */
  ts?: Timestamp;

  constructor(data?: PartialMessage<PricePoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "price.v1.PricePoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ts", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PricePoint {
    return new PricePoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PricePoint {
    return new PricePoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PricePoint {
    return new PricePoint().fromJsonString(jsonString, options);
  }

  static equals(a: PricePoint | PlainMessage<PricePoint> | undefined, b: PricePoint | PlainMessage<PricePoint> | undefined): boolean {
    return proto3.util.equals(PricePoint, a, b);
  }
}

